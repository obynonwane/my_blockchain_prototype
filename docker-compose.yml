services:
  node-service:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8080:8080"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      DATABASE_USER: "${DATABASE_USER}"
      DATABASE_PASSWORD: "${DATABASE_PASSWORD}"
      DATABASE_HOST: "${DATABASE_HOST}"
      DATABASE_PORT: "${DATABASE_PORT}"
      DATABASE_NAME: "${DATABASE_NAME}"

  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    env_file:
      - .env # Ensure the .env.test file is being used
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -q -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 3

  postgres_init:
    image: postgres:latest
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    env_file:
      - .env
    entrypoint:
      [
        "sh",
        "-c",
        "until pg_isready -h postgres -U ${POSTGRES_USER}; do echo waiting for postgres; sleep 2; done; \
        if ! PGPASSWORD=${POSTGRES_PASSWORD} psql -h postgres -U ${POSTGRES_USER} -d postgres -tAc \"SELECT 1 FROM pg_database WHERE datname='nodedb'\" | grep -q 1; then \
          echo 'Creating database nodedb'; \
          PGPASSWORD=${POSTGRES_PASSWORD} createdb -h postgres -U ${POSTGRES_USER} -d postgres --owner=${POSTGRES_USER} nodedb; \
        else \
          echo 'Database nodedb already exists'; \
        fi"
      ]
